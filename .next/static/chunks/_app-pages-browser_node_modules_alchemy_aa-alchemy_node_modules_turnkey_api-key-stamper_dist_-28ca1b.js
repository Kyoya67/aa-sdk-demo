"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_alchemy_aa-alchemy_node_modules_turnkey_api-key-stamper_dist_-28ca1b"],{

/***/ "(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: function() { return /* binding */ convertTurnkeyApiKeyToJwk; }\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    let jwk;\n    try {\n        jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayFromHexString)(compressedPublicKeyHex));\n    }\n    catch (e) {\n        throw new Error(`unable to load API key: invalid public key. Did you switch your public and private key?`);\n    }\n    // Ensure that d is sufficiently padded\n    jwk.d = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.hexStringToBase64url)(uncompressedPrivateKeyHex, _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_JWK_MEMBER_BYTE_LENGTH);\n    return jwk;\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYWxjaGVteS9hYS1hbGNoZW15L25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlEO0FBQ3lEOztBQUVsSDtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFO0FBQ0E7QUFDQSxjQUFjLHNFQUFXLENBQUMsMEVBQXVCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVFQUFvQiw0QkFBNEIsNkVBQThCO0FBQzFGO0FBQ0E7O0FBRXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYWxjaGVteS9hYS1hbGNoZW15L25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC91dGlscy5tanM/MTZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb2ludERlY29kZSB9IGZyb20gJy4vdGluay9lbGxpcHRpY19jdXJ2ZXMubWpzJztcbmltcG9ydCB7IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nLCBoZXhTdHJpbmdUb0Jhc2U2NHVybCwgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RIIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG5mdW5jdGlvbiBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrKGlucHV0KSB7XG4gICAgY29uc3QgeyB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LCBjb21wcmVzc2VkUHVibGljS2V5SGV4IH0gPSBpbnB1dDtcbiAgICBsZXQgandrO1xuICAgIHRyeSB7XG4gICAgICAgIGp3ayA9IHBvaW50RGVjb2RlKHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nKGNvbXByZXNzZWRQdWJsaWNLZXlIZXgpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmFibGUgdG8gbG9hZCBBUEkga2V5OiBpbnZhbGlkIHB1YmxpYyBrZXkuIERpZCB5b3Ugc3dpdGNoIHlvdXIgcHVibGljIGFuZCBwcml2YXRlIGtleT9gKTtcbiAgICB9XG4gICAgLy8gRW5zdXJlIHRoYXQgZCBpcyBzdWZmaWNpZW50bHkgcGFkZGVkXG4gICAgandrLmQgPSBoZXhTdHJpbmdUb0Jhc2U2NHVybCh1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LCBERUZBVUxUX0pXS19NRU1CRVJfQllURV9MRU5HVEgpO1xuICAgIHJldHVybiBqd2s7XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: function() { return /* binding */ signWithApiKey; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYWxjaGVteS9hYS1hbGNoZW15L25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC93ZWJjcnlwdG8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNFOztBQUUxRDtBQUNBO0FBQ0EsWUFBWSxpQ0FBaUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLCtCQUErQixjQUFjO0FBQzdDO0FBQ0E7QUFDQSxZQUFZLG9EQUFvRDtBQUNoRSxnQkFBZ0IscUVBQXlCO0FBQ3pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVcsd0VBQXFCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BhbGNoZW15L2FhLWFsY2hlbXkvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3dlYmNyeXB0by5tanM/MmYxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgdWludDhBcnJheVRvSGV4U3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSB9ID0gaW5wdXQ7XG4gICAgY29uc3Qga2V5ID0gYXdhaXQgaW1wb3J0VHVybmtleUFwaUtleSh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXksXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgc2lnbk1lc3NhZ2UoeyBrZXksIGNvbnRlbnQgfSk7XG59O1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0VHVybmtleUFwaUtleShpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXgsXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwiandrXCIsIGp3aywge1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIG5hbWVkQ3VydmU6IFwiUC0yNTZcIixcbiAgICB9LCBmYWxzZSwgLy8gbm90IGV4dHJhY3RhYmxlXG4gICAgW1wic2lnblwiXSAvLyBhbGxvdyBzaWduaW5nXG4gICAgKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlKGlucHV0KSB7XG4gICAgY29uc3QgeyBrZXksIGNvbnRlbnQgfSA9IGlucHV0O1xuICAgIGNvbnN0IHNpZ25hdHVyZUllZWUxMzYzID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5zaWduKHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBoYXNoOiBcIlNIQS0yNTZcIixcbiAgICB9LCBrZXksIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb250ZW50KSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlRGVyID0gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihuZXcgVWludDhBcnJheShzaWduYXR1cmVJZWVlMTM2MykpO1xuICAgIHJldHVybiB1aW50OEFycmF5VG9IZXhTdHJpbmcoc2lnbmF0dXJlRGVyKTtcbn1cbi8qKlxuICogYFN1YnRsZUNyeXB0by5zaWduKC4uLilgIG91dHB1dHMgc2lnbmF0dXJlIGluIElFRUUgUDEzNjMgZm9ybWF0OlxuICogLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3VidGxlQ3J5cHRvL3NpZ24jZWNkc2FcbiAqXG4gKiBUdXJua2V5IGV4cGVjdHMgdGhlIHNpZ25hdHVyZSBlbmNvZGluZyB0byBiZSBERVItZW5jb2RlZCBBU04uMTpcbiAqIC0gaHR0cHM6Ly9naXRodWIuY29tL3RraHEvdGtjbGkvYmxvYi83ZjAxNTlhZjVhNzMzODdmZjA1MDY0NzE4MGQxZGI0ZDNhM2FhMDMzL3NyYy9pbnRlcm5hbC9hcGlrZXkvYXBpa2V5LmdvI0wxNDlcbiAqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDExNFxuICpcbiAqIFRyYW5zZm9ybSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gSUVFRSAxMzYzIGVuY29kaW5nIHRvIERFUiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0gaWVlZSB0aGUgRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgZW5jb2RpbmdcbiAqIEByZXR1cm4gRUNEU0Egc2lnbmF0dXJlIGluIERFUiBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0RWNkc2FJZWVlMTM2M1RvRGVyKGllZWUpIHtcbiAgICBpZiAoaWVlZS5sZW5ndGggJSAyICE9IDAgfHwgaWVlZS5sZW5ndGggPT0gMCB8fCBpZWVlLmxlbmd0aCA+IDEzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElFRUUgUDEzNjMgc2lnbmF0dXJlIGVuY29kaW5nLiBMZW5ndGg6IFwiICsgaWVlZS5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCByID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KDAsIGllZWUubGVuZ3RoIC8gMikpO1xuICAgIGNvbnN0IHMgPSB0b1Vuc2lnbmVkQmlnTnVtKGllZWUuc3ViYXJyYXkoaWVlZS5sZW5ndGggLyAyLCBpZWVlLmxlbmd0aCkpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IDEgKyAxICsgci5sZW5ndGggKyAxICsgMSArIHMubGVuZ3RoO1xuICAgIGxldCBkZXI7XG4gICAgaWYgKGxlbmd0aCA+PSAxMjgpIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMyk7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDEyOCArIDE7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGggKyAyKTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDQ4O1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gci5sZW5ndGg7XG4gICAgZGVyLnNldChyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSByLmxlbmd0aDtcbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gcy5sZW5ndGg7XG4gICAgZGVyLnNldChzLCBvZmZzZXQpO1xuICAgIHJldHVybiBkZXI7XG59XG4vKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2VsbGlwdGljX2N1cnZlcy50cyNMMzExXG4gKlxuICogVHJhbnNmb3JtIGEgYmlnIGludGVnZXIgaW4gYmlnIGVuZGlhbiB0byBtaW5pbWFsIHVuc2lnbmVkIGZvcm0gd2hpY2ggaGFzXG4gKiBubyBleHRyYSB6ZXJvIGF0IHRoZSBiZWdpbm5pbmcgZXhjZXB0IHdoZW4gdGhlIGhpZ2hlc3QgYml0IGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gdG9VbnNpZ25lZEJpZ051bShieXRlcykge1xuICAgIC8vIFJlbW92ZSB6ZXJvIHByZWZpeGVzLlxuICAgIGxldCBzdGFydCA9IDA7XG4gICAgd2hpbGUgKHN0YXJ0IDwgYnl0ZXMubGVuZ3RoICYmIGJ5dGVzW3N0YXJ0XSA9PSAwKSB7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgc3RhcnQgPSBieXRlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBsZXQgZXh0cmFaZXJvID0gMDtcbiAgICAvLyBJZiB0aGUgMXN0IGJpdCBpcyBub3QgemVybywgYWRkIDEgemVybyBieXRlLlxuICAgIGlmICgoYnl0ZXNbc3RhcnRdICYgMTI4KSA9PSAxMjgpIHtcbiAgICAgICAgLy8gQWRkIGV4dHJhIHplcm8uXG4gICAgICAgIGV4dHJhWmVybyA9IDE7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aCAtIHN0YXJ0ICsgZXh0cmFaZXJvKTtcbiAgICByZXMuc2V0KGJ5dGVzLnN1YmFycmF5KHN0YXJ0KSwgZXh0cmFaZXJvKTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViY3J5cHRvLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@alchemy/aa-alchemy/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n"));

/***/ })

}]);